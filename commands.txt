# OpenAI Organizations MCP Server Commands

## Current Commands
- list_projects: Lists all projects for the authenticated user

## MCP Resources and Templates

### Static Resources
These are application-controlled resources representing current state:

1. Active Projects
   - URI: openai-orgs://active-projects
   - MIME Type: application/vnd.openai-orgs.project-list+json
   - Description: Currently active projects in the organization
   - Supports: Pagination, Subscribe for updates

2. Current Members
   - URI: openai-orgs://current-members
   - MIME Type: application/vnd.openai-orgs.member-list+json
   - Description: Current organization members
   - Supports: Pagination, Subscribe for updates

3. Usage Dashboard
   - URI: openai-orgs://usage-dashboard
   - MIME Type: application/vnd.openai-orgs.usage+json
   - Description: Current usage statistics dashboard
   - Supports: Subscribe for real-time updates

### Resource Templates
These allow parameterized access to resources:

1. Project Template
   - URI Template: openai-orgs://projects/{project_id}
   - MIME Type: application/vnd.openai-orgs.project+json
   - Description: Access specific project details
   - Parameters:
     - project_id: The unique identifier of the project

2. Member Template
   - URI Template: openai-orgs://members/{member_id}
   - MIME Type: application/vnd.openai-orgs.member+json
   - Description: Access specific member details
   - Parameters:
     - member_id: The unique identifier of the member

3. Usage Template
   - URI Template: openai-orgs://usage/{metric_id}
   - MIME Type: application/vnd.openai-orgs.usage+json
   - Description: Access specific usage metrics
   - Parameters:
     - metric_id: The identifier for specific usage metrics

### Implementation Priority

1. Static Resources (Phase 1)
   - Active Projects resource
   - Current Members resource
   - Usage Dashboard resource
   - Implement real-time updates via subscriptions

2. Resource Templates (Phase 2)
   - Project template with parameter validation
   - Member template with role-based access
   - Usage template with metric validation

### Resource Implementation Notes

1. Static Resources:
   - Implement as concrete resources in resources.go
   - Add real-time update support
   - Implement proper caching
   - Add pagination support
   - Example:
     ```go
     // Register concrete resources
     s.AddResource("openai-orgs://active-projects", handleActiveProjects)
     s.AddResource("openai-orgs://current-members", handleCurrentMembers)
     s.AddResource("openai-orgs://usage-dashboard", handleUsageDashboard)
     ```

2. Resource Templates:
   - Implement as URI templates
   - Add parameter validation
   - Support dynamic resource generation
   - Example:
     ```go
     // Register resource templates
     s.AddResourceTemplate(projectTemplate, handleProjectResource)
     s.AddResourceTemplate(memberTemplate, handleMemberResource)
     s.AddResourceTemplate(usageTemplate, handleUsageResource)
     ```

3. Error Handling:
   - Standard error responses for both types
   - Proper error wrapping
   - Context preservation

4. Resource Capabilities:
   - subscribe: true (for real-time updates)
   - listChanged: true (for resource list updates)
   - Implement proper MIME types
   - Configure pagination defaults

5. Testing Strategy:
   - Unit tests for both resource types
   - Integration tests for real-time updates
   - Load testing for pagination
   - Parameter validation tests for templates

## Resource URI Structure
- Projects: openai-orgs://projects/{project_id}
- Members: openai-orgs://members/{member_id}
- Usage: openai-orgs://usage/{metric_id}

## Server Integration Steps
1. Resource Registration:
   - Import the resources package in server.go
   - Call AddResources() in NewMCPServer() initialization
   - Example:
     ```go
     func NewMCPServer() *server.MCPServer {
         mcpServer := server.NewMCPServer(
             serverName,
             version,
             server.WithInstructions(instructions),
             server.WithLogging(),
             server.WithToolCapabilities(true),
             server.WithResourceCapabilities(true, true), // Enable resource capabilities
         )

         AddTools(mcpServer)
         AddResources(mcpServer)  // Register all resources
         return mcpServer
     }
     ```

2. Resource Capabilities:
   - Enable resource capabilities in server initialization
   - Set up proper MIME types for each resource type
   - Configure pagination defaults and limits

3. Testing:
   - Verify resource registration
   - Test URI template matching
   - Validate pagination behavior
   - Check error handling
