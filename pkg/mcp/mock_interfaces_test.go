// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/klauern/openai-orgs/pkg/mcp (interfaces: ResourceProvider,ClientProvider,ResourceManager,SubscriptionManager)
//
// Generated by this command:
//
//	mockgen -destination=mock_interfaces_test.go -package=mcp github.com/klauern/openai-orgs/pkg/mcp ResourceProvider,ClientProvider,ResourceManager,SubscriptionManager
//

// Package mcp is a generated GoMock package.
package mcp

import (
	context "context"
	reflect "reflect"

	openaiorgs "github.com/klauern/openai-orgs"
	mcp "github.com/mark3labs/mcp-go/mcp"
	gomock "go.uber.org/mock/gomock"
)

// MockResourceProvider is a mock of ResourceProvider interface.
type MockResourceProvider struct {
	ctrl     *gomock.Controller
	recorder *MockResourceProviderMockRecorder
	isgomock struct{}
}

// MockResourceProviderMockRecorder is the mock recorder for MockResourceProvider.
type MockResourceProviderMockRecorder struct {
	mock *MockResourceProvider
}

// NewMockResourceProvider creates a new mock instance.
func NewMockResourceProvider(ctrl *gomock.Controller) *MockResourceProvider {
	mock := &MockResourceProvider{ctrl: ctrl}
	mock.recorder = &MockResourceProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockResourceProvider) EXPECT() *MockResourceProviderMockRecorder {
	return m.recorder
}

// GetResource mocks base method.
func (m *MockResourceProvider) GetResource(ctx context.Context, uri string, params map[string]any) (any, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetResource", ctx, uri, params)
	ret0, _ := ret[0].(any)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetResource indicates an expected call of GetResource.
func (mr *MockResourceProviderMockRecorder) GetResource(ctx, uri, params any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetResource", reflect.TypeOf((*MockResourceProvider)(nil).GetResource), ctx, uri, params)
}

// Subscribe mocks base method.
func (m *MockResourceProvider) Subscribe(uri string) (<-chan mcp.ResourceContents, func()) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Subscribe", uri)
	ret0, _ := ret[0].(<-chan mcp.ResourceContents)
	ret1, _ := ret[1].(func())
	return ret0, ret1
}

// Subscribe indicates an expected call of Subscribe.
func (mr *MockResourceProviderMockRecorder) Subscribe(uri any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Subscribe", reflect.TypeOf((*MockResourceProvider)(nil).Subscribe), uri)
}

// MockClientProvider is a mock of ClientProvider interface.
type MockClientProvider struct {
	ctrl     *gomock.Controller
	recorder *MockClientProviderMockRecorder
	isgomock struct{}
}

// MockClientProviderMockRecorder is the mock recorder for MockClientProvider.
type MockClientProviderMockRecorder struct {
	mock *MockClientProvider
}

// NewMockClientProvider creates a new mock instance.
func NewMockClientProvider(ctrl *gomock.Controller) *MockClientProvider {
	mock := &MockClientProvider{ctrl: ctrl}
	mock.recorder = &MockClientProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClientProvider) EXPECT() *MockClientProviderMockRecorder {
	return m.recorder
}

// NewClient mocks base method.
func (m *MockClientProvider) NewClient(authToken string) *openaiorgs.Client {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewClient", authToken)
	ret0, _ := ret[0].(*openaiorgs.Client)
	return ret0
}

// NewClient indicates an expected call of NewClient.
func (mr *MockClientProviderMockRecorder) NewClient(authToken any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewClient", reflect.TypeOf((*MockClientProvider)(nil).NewClient), authToken)
}

// MockResourceManager is a mock of ResourceManager interface.
type MockResourceManager struct {
	ctrl     *gomock.Controller
	recorder *MockResourceManagerMockRecorder
	isgomock struct{}
}

// MockResourceManagerMockRecorder is the mock recorder for MockResourceManager.
type MockResourceManagerMockRecorder struct {
	mock *MockResourceManager
}

// NewMockResourceManager creates a new mock instance.
func NewMockResourceManager(ctrl *gomock.Controller) *MockResourceManager {
	mock := &MockResourceManager{ctrl: ctrl}
	mock.recorder = &MockResourceManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockResourceManager) EXPECT() *MockResourceManagerMockRecorder {
	return m.recorder
}

// AddResource mocks base method.
func (m *MockResourceManager) AddResource(resource *mcp.Resource, handler ResourceHandler) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AddResource", resource, handler)
}

// AddResource indicates an expected call of AddResource.
func (mr *MockResourceManagerMockRecorder) AddResource(resource, handler any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddResource", reflect.TypeOf((*MockResourceManager)(nil).AddResource), resource, handler)
}

// ListResources mocks base method.
func (m *MockResourceManager) ListResources() []*mcp.Resource {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListResources")
	ret0, _ := ret[0].([]*mcp.Resource)
	return ret0
}

// ListResources indicates an expected call of ListResources.
func (mr *MockResourceManagerMockRecorder) ListResources() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListResources", reflect.TypeOf((*MockResourceManager)(nil).ListResources))
}

// MockSubscriptionManager is a mock of SubscriptionManager interface.
type MockSubscriptionManager struct {
	ctrl     *gomock.Controller
	recorder *MockSubscriptionManagerMockRecorder
	isgomock struct{}
}

// MockSubscriptionManagerMockRecorder is the mock recorder for MockSubscriptionManager.
type MockSubscriptionManagerMockRecorder struct {
	mock *MockSubscriptionManager
}

// NewMockSubscriptionManager creates a new mock instance.
func NewMockSubscriptionManager(ctrl *gomock.Controller) *MockSubscriptionManager {
	mock := &MockSubscriptionManager{ctrl: ctrl}
	mock.recorder = &MockSubscriptionManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSubscriptionManager) EXPECT() *MockSubscriptionManagerMockRecorder {
	return m.recorder
}

// Notify mocks base method.
func (m *MockSubscriptionManager) Notify(uri string, contents mcp.ResourceContents) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Notify", uri, contents)
}

// Notify indicates an expected call of Notify.
func (mr *MockSubscriptionManagerMockRecorder) Notify(uri, contents any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Notify", reflect.TypeOf((*MockSubscriptionManager)(nil).Notify), uri, contents)
}

// Subscribe mocks base method.
func (m *MockSubscriptionManager) Subscribe(uri string) chan mcp.ResourceContents {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Subscribe", uri)
	ret0, _ := ret[0].(chan mcp.ResourceContents)
	return ret0
}

// Subscribe indicates an expected call of Subscribe.
func (mr *MockSubscriptionManagerMockRecorder) Subscribe(uri any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Subscribe", reflect.TypeOf((*MockSubscriptionManager)(nil).Subscribe), uri)
}

// Unsubscribe mocks base method.
func (m *MockSubscriptionManager) Unsubscribe(uri string, ch chan mcp.ResourceContents) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Unsubscribe", uri, ch)
}

// Unsubscribe indicates an expected call of Unsubscribe.
func (mr *MockSubscriptionManagerMockRecorder) Unsubscribe(uri, ch any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Unsubscribe", reflect.TypeOf((*MockSubscriptionManager)(nil).Unsubscribe), uri, ch)
}
